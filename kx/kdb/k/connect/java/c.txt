1. put http://kx.com/a/k/connect/java/c.class in CLASSPATH/k
2. get http://kx.com/a/k/connect/java/test.java
3. javac test.java
4. k -i 2001
5. java test
 
new c(String host,int port);			// open connection
 Object k(String s);				// execute string
 Object k(String f,Object x);		// f[x]
 Object k(String f,Object x,Object y);		// f[x;y]
 Object k(String f,Object x,Object y,Object z);		// f[x;y;z]
 Object ka(String f,Object[]a);	// f . a (list of args) synch

 Object k();			// thread-poll for pushed data

 void ks(String s[,Object x[,Object y]]);	// f[x;y] asynch
 void ksa(String f,Object[]a);	// f . a (list of args) asynch
 void close();			// close connection

2002.08.24(s=new ServerSocket(port))
new c(ServerSocket s);   // accept incoming client
 void w(2,Object x); // respond to get message

k type	       java type
1(int)         Integer(Boolean,Date)
2(float)       Double(Time,Timestamp)
3(char)        Byte
4(sym)         String
0(general)     Object[]
-1(int)        int[]
-2(float)      double[]
-3(char)       byte[]
-4(sym)        String[]
6(nil)         null

error           exception  

for example,

 k.c c=new k.c("localhost",2001);	// connect to k -i 2001

1. call analytic

 c.k("\\l code");        // load analytics, e.g. f:{[x;y;z]x+y+z}
 c.k("f",x,y,z);         // f[x;y;z]

2. updates from server? polling thread.

 c.k("w,:_w");		// register for updates
 for(;;)u(c.k());	// u is your update function

3. mix pull and push? make it all push. 

 c.ks("send me new page")

