each kdb process handles unlimited concurrent http clients and
one thousand concurrent connection(jdbc/odbc/kdbc) clients.

HTTP server: k db trade.t -P 2080	# for codeless clients ...

browser
 http://localhost:2080/?select sum amount by stock from trade

excel2000 (data/getexternaldata/newwebquery)
 http://localhost:2080/.txt?select sum amount by stock from trade

perl (use LWP::Simple;)
 get("http://localhost:2080/.xml?select sum amount by stock from trade")

the kdb server returns xml, csv, txt or html.

KDBC server: k db trade.t -p 2001	# for jdbc/odbc/kdbc clients ...

JDBC, see http://kx.com/a/kdb/connect/jdbc
ODBC, see http://kx.com/a/kdb/connect/odbc

jdbc and odbc use kdbc. kdbc is faster and simpler.
jdbc/odbc default is sql. kdbc default is ksql. ($ to switch)
kdbc result can be atom, list or table(names;(col0;col1;...);types)

the kdbc interface is result=k(string) or k(func,arg0[,arg1...])

java, install http://kx.com/a/k/connect/c.class in $CLASSPATH/k
import java.sql.*;
public class test{public static void main(String args[]){
 try{k.c c = new k.c("localhost",2001);
  System.out.println(c.k("avg trade.price")); // Double
  Object[]r = (Object[])c.k("select sum amount by stock from trade"); // table
  String[]n = (String[])r[0]; // column names ("stock","amount")
  Object[]d = (Object[])r[1]; // column data  (("aaa","bbb",...),(.,.,...))
  String[]t = (String[])r[2]; // column types ("varchar","int")
  System.out.println("columns: "+c.n(n));
  for(int i=0;i<n.length;++i)System.out.println(n[i]+" "+t[i]);
  System.out.println("rows: "+c.n(d[0]));
  for(int j=0;j<c.n(d[0]);++j)for(int i=0;i<n.length;++i) // print all rows
   if(t[i].equals("int"))System.out.println(((int[])d[i])[j]);else
   if(t[i].equals("float"))System.out.println(((double[])d[i])[j]);else
   if(t[i].equals("varchar"))System.out.println(((String[])d[i])[j]);

  int m=1000;Object[]bulk=new Object[4]; // 1000 new transactions
  bulk[0]=new String[m];bulk[1]=new double[m];bulk[2]=new int[m];bulk[3]=new Date[m];
  for(int i=0;i<m;++i){
   ((String[])bulk[0])[i]="aaa";
   ((double[])bulk[1])[i]=88.5;
   ((int[])bulk[2])[i]=5600+i;
   ((Date[])bulk[3])[i]=Date.valueOf("2000-1-1");}

  c.k("insert","trade",bulk);  // bulk insert

  c.close();}catch(Exception e){System.out.println(e.getMessage());}}}

for parameters in java: c.k(string[,arg0,...]), e.g.

 c.k("select sum amount from trade where amount > ?",2000)
 c.k("f",x,y)	// f is stored function, x,y are data

k, install http://kx.com/download ksetup.exe
 h:3:`localhost,2001 / connect
 h 4:"avg trade.price"
 h 4:"select sum amount by stock from trade"
 h 4:(`insert;(`trade;1000#'(`aaa;88.5;5600;_jd 20000101)))
 3:h / close

vb, install http://kx.com/a/kdb/connect/kdb.bas
 h = kdbopen("//localhost:2001")
 ?kdb(h,"avg trade.price")
 r=kdb(h,"select sum amount by stock from trade")
 ?r(0)(0)		' stock
 ?r(1)(0)(0)	' aaa
 ?r(1)(1)(0)	' ...
 r=kdb(h,"insert","trade",array("aaa",88.5,5600,#1/1/2000#))
 kdbclose h

excel2000, install http://kx.com/a/kdb/connect/kdb.xls
 =kdbx("//localhost:2001","avg trade.price")
 =kdbx("//localhost:2001","select sum amount by stock from trade") ctrl-shift-enter

c, install http://kx.com/a/k/connect/c/k20.h  CandK.txt (NT/WINDOWS k20.lib)
#include"k20.h"
extern printf(S s,...),gets(S);
main(){K q,r,n,d,t;int i,m; // query,result,names,data,types
 cd(ksk("h:3:(`localhost;2001)",0)); // connect
 cd(ksk("k:{h 4:x}",0)); // remote exec function
 q=gnk(1,gp("select sum amount by stock from trade")); // query
 r=ksk("k",q),cd(q);	// result,free query
 n=KK(r)[0],d=KK(r)[1],t=KK(r)[2];	// names, inverted data, types
 printf("columns: %d\n",n->n); // number of columns
 {I i=0;for(;i<n->n;++i)printf("%s %s\n",KS(n)[i],KS(t)[i]);} // name&type
 printf("rows: %d\n",KK(d)[0]->n); // number of rows
 printf("%s %d\n",KS(KK(d)[0])[0],KI(KK(d)[1])[0]); // row 0(int,varchar)
 cd(r);  // free result
// q=gnk(4,gs(sp("aaa")),gf(88.5),gi(5600),gi(jd(20000101))); // one row
 m=1000,q=gnk(4,gtn(-4,m),gtn(-2,m),gtn(-1,m),gtn(-1,m));
 for(i=0;i<m;++i)KS(KK(q)[0])[i]=sp("aaa"),KF(KK(q)[1])[i]=88.5,KI(KK(q)[2])[i]=5600+i,KI(KK(q)[3])[i]=jd(20000101);
 q=gnk(1,gnk(2,gp("insert"),gnk(2,gs(sp("trade")),q))); // insert
 cd(ksk("k",q)),cd(q);
 cd(ksk("3:h",0)); // close connection
 return 0;}
