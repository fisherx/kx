FLAT FILE LOADER  (text at 2MB/sec; data at 20MB/sec)

k(db) has types IFS(DTZ), i.e. int float symbol (date time timestamp)
N.B. symbol is string is varchar (use C for varbinary)

ksql>load't.csv'       # uses heuristic on first 4096 bytes to determine types
ksql>t:(types,',')load't.csv'     # if headers
ksql>t:(names,types,',')load'f'   # if no headers

where types are among 'IFSDTZ '. Symbol trims. Blank skips.
use \delim:`$"\t" / for t.txt

the k equivalent loaders are:

\t:.+(types;,",")0:`t.csv
\t:.+(names;(types;",")0:`f)

k also has fixed width matrix loaders

\m:(types;width)0:`f	/ text

\m:(types;width)1:`f	/ data
 types: "IbsiFjfdMmSDZ "
 width: "?124?84884?48?"
 I(byte/short/int) F(long/float/double/Money/smallmoney) S D(datetime4) Z(datetime)
 use (width;types) to read reverse binary (little<>big endian).  MmDZ are for bcp.

we can use (f;index;length) instead of f to read part of a file.
index and length are multiples of width plus end-of-line chars.

see http://kx.com/a/kdb/document/b.txt for kdb architecture

kdb loads
 bulk binary data at about 20MB/second. (flat file, bcp)
 bulk text data at about 2MB/second. (csv,txt,prn,...)
 bulk odbc data at about 2MB/second. (mdb,mdf,xls,...)
 bulk client data at network speed. (kdbc)
 bulk java client data at about 1MB/second. (kdbc)
 single sql inserts at about .005MB/second. (odbc,jdbc)

ksql loaders
 / load delimited text table by value
 t:([names,]types,delimiter)load't.*'

 / load&save tables by name
 {load|save}'t.{csv|txt}'
 [dir]load d / load directory
 [dir]load t's / load table .l's
 [dir]save t's / save table .l's
 [dir]rsave t's / save tables as splayed subdirectories

 / load&save database
 {load|save}'d.kdb'

 / odbc loaders
 load'd.{mdb|mdf|xls|dsn|...}'
 \h:.odbc.open"driver=..."
 \t:.odbc.exec[h;"select ..."]

bcp loader:	http://kx.com/a/kdb/connect/bcp.k (uses 1:)

kdbc client loaders
 http://kx.com/a/kdb/connect/kdbc.txt	h 4:(`insert;(`t;bulkdata))
 http://kx.com/a/k/connect/java		c.k("insert",("t",bulkdata))

odbc and jdbc clients, e.g. insert into t values(...)
 http://kx.com/a/kdb/connect/odbc
 http://kx.com/a/kdb/connect/jdbc
 
million elements per second
data(I10 F5 S1) (type;width)1:...
text(I1  F.1 S1) (type;width)0:...
java(I2  F1  S.04) c.k("insert",("t",bulk))