CLIENT http://kx.com/a/kdb/connect/kdbc.txt

ports: 2010/3010 historic   trade:([]date,sym,time ...)
ports: 2012/3012 realtime   trade:([]time,sym, ...)

clients can use http, jdbc, odbc, kdbc from perl, java, vb, excel and c.
we recommend java(or vb) clients using kdbc because with kdbc we can 
read/write arrays and we don't have to worry about memory management.

1. http (html/xml/txt/csv)  from java, perl, ...
advantage: no client code, text(human readable)
disadvantage: text(trading programs translate back to data)

2. jdbc/odbc (requires kdb driver + kdbc)
advantage: handles date/time   (remember to put $ in front of ksql)

3. kdbc (requires: c.java, k20.dll or k20.so) from java, vb, c ...
advantage: simple, fast, powerful(k("...",x,y) with array parameters)
disadvantage: we have to translate kdb date/time to client date/time.

given kdb date(integer offset from 2035-01-01) and time(double fraction of day):

 unix: time_t ts=86400*(23741+date+time); 
 java: java.sql.Timestamp ts=new java.sql.Timestamp((long)8.64e7*(23741+date+time));
 vb:   ts=cdate(49310+date+time)

kdbc examples against realtimeDB on localhost:2012

java: (http://kx.com/a/k/connect/java/c.class into CLASSPATH/k)
 k.c c=new k.c("localhost",2012);String[]s={"IBM","MSFT"};
 Object r=c.k("select last price by sym from trade where sym in ?",s);

k: (http://kx.com/download k)
 h:3:`localhost,2012;s:`IBM`MSFT
 r:h 4:("select last price by sym from trade where sym in ?";s)

vb: (k and http://kx.com/a/kdb/connect/kdb.bas and download k)
 h=kdbopen("//localhost:2012");s=Array("IBM","MSFT");
 r=kdb(h,"select last price by sym from trade where sym in ?",s);

c: (k and http://kx.com/a/k/connect/c k20.h k20.lib)
 #include"k20.h" // K structure definitions and generators
 main(){K r=ksk("h:3:`localhost,2012;k:{h 4:(x;y)}",0),x,y;
  if(r->t==6&&r->n)return printf("error %s\n",(S)r->n);
  x=gp("select last price by sym from trade where sym in ?");
  y=gtn(-4,2),KS(y)[0]=sp("IBM"),KS(y)[1]=sp("MSFT"),y=gnk(1,y);
  r=ksk("k",x=gnk(2,x,y)),cd(x);
  if(r->t==6&&r->n)return printf("error %s\n",(S)r->n);
  ...


SERVER
ktdb executes ksql, k and c. (realtime can also execute sql92)
server functions are written in k or c (dynamic load), e.g.

\signum:{(x>0)-x<0}  / select sum signum[deltas price] by sym ...
\filter:{...}
\autocorrelation:{...}

the functions execute on (grouped) columns with microsecond overhead.