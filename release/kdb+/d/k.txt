\w	workspace(used allocated max mapped)
\l f	load file (or dir:files splays parts scripts)
\t x	time expression
\d [d]	directory
\v [d]	variables
\f [d]	functions
\P [7]	print digits(0-all)
\W [2]	week offset(sat..fri)
\z [0]	"D"$ uses mm/dd/yyyy or dd/mm/yyyy
\cd..	o/s commands
\\	exit

.z. f(file) x(args) a(addr) h(host) u(user) w(who) zZ(gmt/local) k(releasedate)
.z. pg[x](get) ps[x](set) po[h](open) pc[h](close) ph[x](http) ts[z](timer) vs[v;i](set)
you can watch open/close with .z.po:{0N!x} .z.pc:{0N!-x}

Noun bxhijefcsmdzuvt*   null:(0N;0n)
(bool byte short int long real float char sym month date datetime minute second time enum*)
atom:(0b;0x00;0h;0;0j;0e;0.0;" ";`;2000.01m;2000.01.01;..T..;00:00;00:00:00;00:00:00.000;*)
list:(01b;0x00ff;2 3h;2 3;2 3j;2 3e;2 3.0;"ab";`a`b;..)     date.(year month week mm dd) 
dict:`a`b!.. table:([]x:..;y:..) or +`x`y!..                time.(minute second hh mm ss)

Verb Infix       Prefix
s:x  gets     :x idem
i+i  plus     +l flip
i-i  minus    -i neg
i*i  times    *l first
f%f  divide   %f reciprocal
a&a  and      &B where
a|a  or	      |l reverse
a^a  fill     ^a null
a=a  equal    =l group	
a<a  less     <l iasc	  <s(hopen)
a>a  more     >l idesc	  >i(hclose)
c$a  cast s$  $a string   h$a "C"$C `$C  
l,l  cat      ,x enlist
i#l  take     #l count
i_l  drop     _a floor    _sc(lower)
x~x  match    ~a not	  ~s(hdelete)
l!l  xkey     !d key	  !i (s;();S):!s
A?a  find     ?l distinct rand([n]?bxhijefcs)
x@i  at   s@  @x type          trap amend(:+-*%&|,)
x.l  dot  s.  .d value    .sCL trap dmend(:+-*%&|,)
A bin a;a in A;a within(a;a);sC like C;{sqrt log exp sin cos tan asin acos atan}f
last sum prd min max avg   wsum wavg
exit getenv

Adverb
'    eachboth    each			 
/    [x]over     over(:+*&|,)		[x]do/while 
\    [x]scan     scan(:+*&|,)		[x]do\while  
':   [x]prior    prior(:-%)
/:   eachright   sv(i:i/:I s:`/:S C:c/:L) j:0x40/:X i:0x0/:X
\:   eachleft    vs(I:i\:i S:`\:s L:c\:C) X:0x40\:j X:0x0\:i

Control $[c;t;f] if[c;..] do[n;..] while[c;..] (:return) ('signal) @[f;x;r](trap)

comm h:<`:host:port;h"23";(-h)"a:2";>h  also: h:<`:file;h 0x..
file .[`:f[/];();[:,];..] !`:d .`:d(defermap) stdout: -1".." stderr: -2".."
line f 0:L:0:f[,j,n] write/read L:w 0:L:("*BXHIJEFCSMDZUVT ";[,]delim)0:{L|f[,j,n]}
byte f 1:G:1:f[,j,n] write/read G:w 1:L:("*bxhijefcsmdzuvt ";   width)1:{G|f[,j,n]}

BNF (Expressions term Noun Verb Adverb Clauses) e:nve|te| t:n|v:tA|V
 n:(<[E]>E)|{<[E]>E}|t[E:E;e|[E]]|N|{exec|select|update|delete}C<by C>from e<where C:C,e>

parse: ([f|{}];x;,`s)
t insert x
?[t;c;b;a] /select
![t;c;b;a] /update

parallel: dir/{date|month|year|int}/{table}/{fields}
updates can happen in background then send reset"\\l ."

keywords
log exp sqrt sum prd min max avg 
in within like bin ss wsum wavg
insert select(by/from/where) update delete exec

firstclass datetime, dictionaries, tables and files.
64bit addresses. more datatypes. dynamic hash&index tables.
much faster ksql. 100K insert/select/update/delete per sec.
much faster file. 100K appends per sec.

types
20+ userenums
98 table
99 dict
100 lambda
101 unary primitive
102 binary primitive
103 ternary(operator)
104 projection
105 composition
106 f'
107 f/
108 f\
109 f':
110 f/:
111 f\:
112 dynamic load
