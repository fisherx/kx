location location location ...

64bit read circa 2000-01-01 for $2,000
nanoseconds(ultraII raid;500MHZ intel rambus)

       sequential random
disk   100 (80MB) 10,000,000
memory   8 (1GB)  100
cache    2 (4GB)  2


consider:

select sum amount*price by stock.industry ...

where is the next double precision number to process?

kdb gets optimal disk hit,(the other guy is random)
(100 nanoseconds versus 10 milliseconds)

optimal memory hit,(the other guy is still on disk)
(8 nanoseconds versus 10 milliseconds) 

and optimal cache hit.(the other guy is in memory)
(2 nanoseconds versus 100 nanoseconds)

kdb also gets optimal cpu pipelining.

vector/column/homogeneity can beat 
object/row/heterogeneity by 1 to 2 orders of magnitude.